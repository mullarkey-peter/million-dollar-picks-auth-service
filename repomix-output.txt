This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-01T14:50:50.042Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

- Pay special attention to the Repository Instruction. These contain important context and guidelines specific to this project.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
- Code comments have been removed.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitattributes
.gitignore
build.gradle
docker-compose.yml
Dockerfile
gradle/wrapper/gradle-wrapper.properties
gradlew
gradlew.bat
repomix-instructions.md
settings.gradle
src/main/java/com/glizzy/milliondollarpicks/authservice/AuthServiceApplication.java
src/main/java/com/glizzy/milliondollarpicks/authservice/config/GrpcServerConfig.java
src/main/java/com/glizzy/milliondollarpicks/authservice/config/SecurityConfig.java
src/main/java/com/glizzy/milliondollarpicks/authservice/dto/AuthResponseDto.java
src/main/java/com/glizzy/milliondollarpicks/authservice/dto/CredentialsDto.java
src/main/java/com/glizzy/milliondollarpicks/authservice/dto/LoginRequestDto.java
src/main/java/com/glizzy/milliondollarpicks/authservice/dto/UserInfoDto.java
src/main/java/com/glizzy/milliondollarpicks/authservice/entity/Credentials.java
src/main/java/com/glizzy/milliondollarpicks/authservice/exception/AuthenticationException.java
src/main/java/com/glizzy/milliondollarpicks/authservice/exception/GlobalExceptionHandler.java
src/main/java/com/glizzy/milliondollarpicks/authservice/filter/JwtAuthenticationFilter.java
src/main/java/com/glizzy/milliondollarpicks/authservice/graphql/AuthResolver.java
src/main/java/com/glizzy/milliondollarpicks/authservice/graphql/ScalarConfig.java
src/main/java/com/glizzy/milliondollarpicks/authservice/grpc/AuthGrpcService.java
src/main/java/com/glizzy/milliondollarpicks/authservice/mapper/CredentialsMapper.java
src/main/java/com/glizzy/milliondollarpicks/authservice/repository/CredentialsRepository.java
src/main/java/com/glizzy/milliondollarpicks/authservice/service/AuthService.java
src/main/java/com/glizzy/milliondollarpicks/authservice/service/AuthServiceImpl.java
src/main/proto/auth.proto
src/main/resources/application-docker.yml
src/main/resources/application.yml
src/main/resources/db/migration/V1__init_auth_schema.sql
src/main/resources/schema/schema.graphqls
src/test/java/com/glizzy/milliondollarpicks/authservice/AuthServiceApplicationTests.java

================================================================
Files
================================================================

================
File: .gitattributes
================
/gradlew text eol=lf
*.bat text eol=crlf
*.jar binary

================
File: .gitignore
================
HELP.md
.gradle
build/
!gradle/wrapper/gradle-wrapper.jar
!**/src/main/**/build/
!**/src/test/**/build/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache
bin/
!**/src/main/**/bin/
!**/src/test/**/bin/

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr
out/
!**/src/main/**/out/
!**/src/test/**/out/

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/

### VS Code ###
.vscode/

================
File: build.gradle
================
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'com.glizzy'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

ext {
    set('springCloudVersion', "2023.0.0")
    set('dgsVersion', "8.4.0")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://repo.spring.io/release" }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${dgsVersion}"
    }
}

dependencies {

    // Spring Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Spring Security for password encoding
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // JPA Dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'org.postgresql:postgresql'

    // Flyway for database migrations
    implementation 'org.flywaydb:flyway-core'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // DGS Framework
    implementation platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${dgsVersion}")
    implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter'
    implementation 'com.netflix.graphql.dgs:graphql-dgs-extended-scalars'
    implementation 'com.netflix.graphql.dgs:graphql-dgs-extended-validation'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // gRPC
    implementation 'io.grpc:grpc-netty-shaded:1.60.0'
    implementation 'io.grpc:grpc-protobuf:1.60.0'
    implementation 'io.grpc:grpc-stub:1.60.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.25.1"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.60.0"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// Source directories for generated code
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
        proto {
            srcDir 'src/main/proto'
        }
    }
}

tasks.withType(ProcessResources) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

================
File: docker-compose.yml
================
version: '3.8'
services:
  auth-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_FLYWAY_URL=jdbc:postgresql://postgres:5432/authdb
      - SPRING_FLYWAY_USER=postgres
      - SPRING_FLYWAY_PASSWORD=postgres
      - AUTHENTICATION_ENABLED=false
    networks:
      - milliondollarpicks-network
    restart: unless-stopped
  postgres:
    image: postgres:15-alpine
    container_name: auth-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=authdb
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - milliondollarpicks-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  pgadmin:
    image: dpage/pgadmin4
    container_name: auth-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - milliondollarpicks-network
    restart: unless-stopped
volumes:
  postgres-data:
networks:
  milliondollarpicks-network:
    driver: bridge

================
File: Dockerfile
================
# Build stage
FROM gradle:8.5-jdk17 AS build
WORKDIR /app

# Copy the gradle configuration files first
COPY gradle/ gradle/
COPY gradlew .
COPY gradlew.bat .
COPY settings.gradle .
COPY build.gradle .

# Copy the source code
COPY src/ src/

# Install protoc (for protocol buffers)
RUN apt-get update && apt-get install -y protobuf-compiler

# Build the application
RUN ./gradlew build -x test

# Run stage
FROM eclipse-temurin:17-jre-alpine
WORKDIR /app
COPY --from=build /app/build/libs/*.jar app.jar
ENTRYPOINT ["java","-jar","/app/app.jar"]

================
File: gradle/wrapper/gradle-wrapper.properties
================
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.12.1-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

================
File: gradlew
================
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s
' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"

================
File: gradlew.bat
================
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

================
File: repomix-instructions.md
================
# Repository Instructions

This repository contains the source code for the Repomix tool. Please follow these guidelines when analyzing the code:

1. Focus on the core functionality in the `src/core` directory.
2. Pay special attention to the security checks in `src/core/security`.
3. Ignore any files in the `tests` directory.

================
File: settings.gradle
================
rootProject.name = 'auth-service'

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/AuthServiceApplication.java
================
package com.glizzy.milliondollarpicks.authservice;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
@SpringBootApplication
@EnableConfigurationProperties
public class AuthServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(AuthServiceApplication.class, args);
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/config/GrpcServerConfig.java
================
package com.glizzy.milliondollarpicks.authservice.config;
import com.glizzy.milliondollarpicks.authservice.grpc.AuthGrpcService;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import java.io.IOException;
@Configuration
public class GrpcServerConfig {
    private static final Logger log = LoggerFactory.getLogger(GrpcServerConfig.class);
    @Value("${grpc.server.port:9090}")
    private int grpcPort;
    private final AuthGrpcService authGrpcService;
    public GrpcServerConfig(AuthGrpcService authGrpcService) {
        this.authGrpcService = authGrpcService;
    }
    @Bean
    public Server grpcServer() throws IOException {
        log.info("Starting gRPC server on port {}", grpcPort);
        Server server = ServerBuilder.forPort(grpcPort)
                .addService(authGrpcService)
                .build();
        server.start();
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            log.info("Shutting down gRPC server");
            if (server != null) {
                server.shutdown();
            }
        }));
        return server;
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/config/SecurityConfig.java
================
package com.glizzy.milliondollarpicks.authservice.config;
import com.glizzy.milliondollarpicks.authservice.filter.JwtAuthenticationFilter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
@Configuration
@EnableWebSecurity
public class SecurityConfig {
    private final JwtAuthenticationFilter jwtAuthenticationFilter;
    public SecurityConfig(JwtAuthenticationFilter jwtAuthenticationFilter) {
        this.jwtAuthenticationFilter = jwtAuthenticationFilter;
    }
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .csrf(AbstractHttpConfigurer::disable)
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/graphql").permitAll()
                        .requestMatchers("/graphiql/**").permitAll()
                        .anyRequest().authenticated()
                )
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
    @Bean
    public FilterRegistrationBean<JwtAuthenticationFilter> jwtAuthFilterRegistration() {
        FilterRegistrationBean<JwtAuthenticationFilter> registrationBean = new FilterRegistrationBean<>(jwtAuthenticationFilter);
        registrationBean.setEnabled(false);
        return registrationBean;
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/dto/AuthResponseDto.java
================
package com.glizzy.milliondollarpicks.authservice.dto;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class AuthResponseDto {
    private String token;
    private Long userId;
    private String username;
    private Boolean success;
    private String message;
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/dto/CredentialsDto.java
================
package com.glizzy.milliondollarpicks.authservice.dto;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class CredentialsDto {
    private Long id;
    private String username;
    private Long userId;
    private Boolean accountLocked;
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/dto/LoginRequestDto.java
================
package com.glizzy.milliondollarpicks.authservice.dto;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import lombok.Builder;
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class LoginRequestDto {
    private String username;
    private String password;
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/dto/UserInfoDto.java
================
package com.glizzy.milliondollarpicks.authservice.dto;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
@Data
@NoArgsConstructor
@AllArgsConstructor
public class UserInfoDto {
    private String id;
    private String username;
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/entity/Credentials.java
================
package com.glizzy.milliondollarpicks.authservice.entity;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.Column;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;
import java.time.OffsetDateTime;
@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "credentials")
public class Credentials {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Column(name = "username", unique = true, nullable = false)
    private String username;
    @Column(name = "password_hash", nullable = false)
    private String passwordHash;
    @Column(name = "last_password_change")
    private OffsetDateTime lastPasswordChange;
    @Column(name = "account_locked")
    private Boolean accountLocked;
    @Column(name = "failed_login_attempts")
    private Integer failedLoginAttempts;
    @Column(name = "user_id")
    private Long userId;
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/exception/AuthenticationException.java
================
package com.glizzy.milliondollarpicks.authservice.exception;
public class AuthenticationException extends RuntimeException {
    public AuthenticationException(String message) {
        super(message);
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/exception/GlobalExceptionHandler.java
================
package com.glizzy.milliondollarpicks.authservice.exception;
import com.netflix.graphql.dgs.exceptions.DefaultDataFetcherExceptionHandler;
import com.netflix.graphql.types.errors.TypedGraphQLError;
import graphql.execution.DataFetcherExceptionHandlerParameters;
import graphql.execution.DataFetcherExceptionHandlerResult;
import org.jetbrains.annotations.NotNull;
import org.springframework.stereotype.Component;
import java.util.concurrent.CompletableFuture;
@Component
public class GlobalExceptionHandler extends DefaultDataFetcherExceptionHandler {
    @NotNull
    @Override
    public CompletableFuture<DataFetcherExceptionHandlerResult> handleException(DataFetcherExceptionHandlerParameters handlerParameters) {
        Throwable exception = handlerParameters.getException();
        if (exception instanceof AuthenticationException) {
            return CompletableFuture.completedFuture(
                    DataFetcherExceptionHandlerResult.newResult()
                            .error(TypedGraphQLError.newBuilder()
                                    .message(exception.getMessage())
                                    .path(handlerParameters.getPath())
                                    .build())
                            .build()
            );
        }
        return super.handleException(handlerParameters);
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/filter/JwtAuthenticationFilter.java
================
package com.glizzy.milliondollarpicks.authservice.filter;
import com.glizzy.milliondollarpicks.authservice.service.AuthService;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import java.io.IOException;
import java.util.ArrayList;
@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {
    private AuthService authService;
    @Value("${jwt.secret}")
    private String jwtSecret;
    @Autowired
    public JwtAuthenticationFilter(@Lazy AuthService authService) {
        this.authService = authService;
    }
    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {
        String authHeader = request.getHeader("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring(7);
            if (authService.validateToken(token)) {
                Claims claims = Jwts.parserBuilder()
                        .setSigningKey(jwtSecret.getBytes())
                        .build()
                        .parseClaimsJws(token)
                        .getBody();
                String username = claims.getSubject();
                UsernamePasswordAuthenticationToken authentication =
                        new UsernamePasswordAuthenticationToken(username, null, new ArrayList<>());
                authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(authentication);
            }
        }
        filterChain.doFilter(request, response);
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/graphql/AuthResolver.java
================
package com.glizzy.milliondollarpicks.authservice.graphql;
import com.glizzy.milliondollarpicks.authservice.dto.AuthResponseDto;
import com.glizzy.milliondollarpicks.authservice.dto.CredentialsDto;
import com.glizzy.milliondollarpicks.authservice.dto.LoginRequestDto;
import com.glizzy.milliondollarpicks.authservice.dto.UserInfoDto;
import com.glizzy.milliondollarpicks.authservice.service.AuthService;
import com.netflix.graphql.dgs.DgsComponent;
import com.netflix.graphql.dgs.DgsQuery;
import com.netflix.graphql.dgs.DgsMutation;
import com.netflix.graphql.dgs.InputArgument;
import graphql.schema.DataFetchingEnvironment;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import jakarta.servlet.http.HttpServletRequest;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
@DgsComponent
@RequiredArgsConstructor
public class AuthResolver {
    private final AuthService authService;
    private static final Logger log = LoggerFactory.getLogger(AuthResolver.class);
    @Value("${jwt.secret}")
    private String jwtSecret;
    @DgsQuery
    public Boolean validateToken(@InputArgument String token, DataFetchingEnvironment env) {
        log.debug("validateToken called with token parameter present: {}", token != null && !token.isEmpty());
        if (token == null || token.isEmpty()) {
            log.debug("Token is null or empty, attempting to extract from header");
            try {
                token = extractTokenFromHeader(env);
                log.debug("Token extracted from header successfully");
            } catch (Exception e) {
                log.error("Failed to extract token from header: {}", e.getMessage());
                return false;
            }
        }
        boolean isValid = authService.validateToken(token);
        log.debug("Token validation result: {}", isValid);
        return isValid;
    }
    @DgsQuery
    public UserInfoDto me(@InputArgument(name = "token", collectionType = String.class) String token,
                          DataFetchingEnvironment env) {
        log.debug("me query called with token parameter present: {}", token != null && !token.isEmpty());
        try {
            if (token == null || token.isEmpty()) {
                log.debug("Token is null or empty, attempting to extract from header");
                token = extractTokenFromHeader(env);
                log.debug("Token extracted from header: {}", token);
            }
            log.debug("JWT Secret length: {}", jwtSecret != null ? jwtSecret.length() : "null");
            log.debug("Attempting to parse token: {}", token);
            Claims claims = null;
            try {
                claims = Jwts.parserBuilder()
                        .setSigningKey(jwtSecret.getBytes())
                        .build()
                        .parseClaimsJws(token)
                        .getBody();
                log.debug("Successfully parsed token");
            } catch (Exception e) {
                log.error("Error parsing JWT token: {}", e.getMessage(), e);
                throw new RuntimeException("Invalid token - parsing error: " + e.getMessage());
            }
            log.debug("Claims content: {}", claims);
            UserInfoDto userInfo = new UserInfoDto();
            try {
                Object userId = claims.get("userId");
                log.debug("userId from claims (type: {}): {}",
                        userId != null ? userId.getClass().getName() : "null", userId);
                userInfo.setId(userId != null ? String.valueOf(userId) : null);
                log.debug("userId set in userInfo: {}", userInfo.getId());
                String username = claims.get("username", String.class);
                log.debug("username from claims: {}", username);
                userInfo.setUsername(username);
                log.debug("userInfo object created successfully: {}", userInfo);
                return userInfo;
            } catch (Exception e) {
                log.error("Error extracting claims data: {}", e.getMessage(), e);
                throw new RuntimeException("Invalid token - claims extraction error: " + e.getMessage());
            }
        } catch (Exception e) {
            log.error("Unexpected error in me query: {}", e.getMessage(), e);
            throw new RuntimeException("Invalid token: " + e.getMessage());
        }
    }
    @DgsMutation
    public AuthResponseDto login(@InputArgument String username, @InputArgument String password) {
        log.debug("login mutation called for username: {}", username);
        LoginRequestDto loginRequest = new LoginRequestDto(username, password);
        try {
            AuthResponseDto response = authService.login(loginRequest);
            log.debug("Login response: success={}, userId={}", response.getSuccess(), response.getUserId());
            if (response.getSuccess()) {
                log.debug("Generated token length: {}",
                        response.getToken() != null ? response.getToken().length() : "null");
            }
            return response;
        } catch (Exception e) {
            log.error("Error during login: {}", e.getMessage(), e);
            throw e;
        }
    }
    @DgsMutation
    public AuthResponseDto logout(@InputArgument String token, DataFetchingEnvironment env) {
        log.debug("logout mutation called with token parameter present: {}", token != null && !token.isEmpty());
        if (token == null || token.isEmpty()) {
            try {
                token = extractTokenFromHeader(env);
                log.debug("Token extracted from header");
            } catch (Exception e) {
                log.error("Failed to extract token from header: {}", e.getMessage());
                throw e;
            }
        }
        try {
            AuthResponseDto response = authService.logout(token);
            log.debug("Logout successful: {}", response.getSuccess());
            return response;
        } catch (Exception e) {
            log.error("Error during logout: {}", e.getMessage(), e);
            throw e;
        }
    }
    @DgsMutation
    public Boolean resetPassword(@InputArgument String username, @InputArgument String newPassword) {
        log.debug("resetPassword mutation called for username: {}", username);
        try {
            authService.resetPassword(username, newPassword);
            log.debug("Password reset successful for username: {}", username);
            return true;
        } catch (Exception e) {
            log.error("Error resetting password: {}", e.getMessage(), e);
            return false;
        }
    }
    @DgsMutation
    public CredentialsDto createCredentials(
            @InputArgument String username,
            @InputArgument String password,
            @InputArgument String userId) {
        log.debug("createCredentials mutation called for username: {}, userId: {}", username, userId);
        try {
            CredentialsDto credentials = authService.createCredentials(username, password, Long.parseLong(userId));
            log.debug("Credentials created successfully: id={}, userId={}", credentials.getId(), credentials.getUserId());
            return credentials;
        } catch (Exception e) {
            log.error("Error creating credentials: {}", e.getMessage(), e);
            throw e;
        }
    }
    private String extractTokenFromHeader(DataFetchingEnvironment env) {
        log.debug("Attempting to extract token from request header");
        ServletRequestAttributes attributes =
                (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        if (attributes == null) {
            log.error("No request context available");
            throw new RuntimeException("No request context available");
        }
        HttpServletRequest request = attributes.getRequest();
        String authHeader = request.getHeader("Authorization");
        log.debug("Authorization header: {}", authHeader != null ?
                authHeader.substring(0, Math.min(20, authHeader.length())) + "..." : "null");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring(7);
            log.debug("Token extracted from header, length: {}", token.length());
            return token;
        }
        log.error("No token provided in the Authorization header");
        throw new RuntimeException("No token provided");
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/graphql/ScalarConfig.java
================
package com.glizzy.milliondollarpicks.authservice.graphql;
import com.netflix.graphql.dgs.DgsComponent;
import com.netflix.graphql.dgs.DgsRuntimeWiring;
import graphql.scalars.ExtendedScalars;
import graphql.schema.idl.RuntimeWiring;
@DgsComponent
public class ScalarConfig {
    @DgsRuntimeWiring
    public RuntimeWiring.Builder addScalar(RuntimeWiring.Builder builder) {
        return builder
                .scalar(ExtendedScalars.DateTime)
                .scalar(ExtendedScalars.Object);
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/grpc/AuthGrpcService.java
================
package com.glizzy.milliondollarpicks.authservice.grpc;
import com.glizzy.milliondollarpicks.authservice.service.AuthService;
import io.grpc.stub.StreamObserver;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import java.util.Optional;
@Service
public class AuthGrpcService extends AuthServiceGrpc.AuthServiceImplBase {
    private final AuthService authService;
    private static final Logger log = LoggerFactory.getLogger(AuthGrpcService.class);
    @Value("${jwt.secret}")
    private String jwtSecret;
    public AuthGrpcService(AuthService authService) {
        this.authService = authService;
    }
    @Override
    public void validateToken(TokenValidationRequest request, StreamObserver<TokenValidationResponse> responseObserver) {
        log.debug("gRPC validateToken called with token length: {}",
                request.getToken() != null ? request.getToken().length() : 0);
        boolean isValid = authService.validateToken(request.getToken());
        TokenValidationResponse response = TokenValidationResponse.newBuilder()
                .setValid(isValid)
                .setMessage(isValid ? "Token is valid" : "Token is invalid or expired")
                .build();
        responseObserver.onNext(response);
        responseObserver.onCompleted();
        log.debug("gRPC validateToken response: {}", response.getValid());
    }
    @Override
    public void getUserInfo(TokenValidationRequest request, StreamObserver<UserInfoResponse> responseObserver) {
        log.debug("gRPC getUserInfo called with token length: {}",
                request.getToken() != null ? request.getToken().length() : 0);
        String token = request.getToken();
        UserInfoResponse.Builder responseBuilder = UserInfoResponse.newBuilder();
        try {
            if (authService.validateToken(token)) {
                Claims claims = Jwts.parserBuilder()
                        .setSigningKey(jwtSecret.getBytes())
                        .build()
                        .parseClaimsJws(token)
                        .getBody();
                Object userId = claims.get("userId");
                String username = claims.get("username", String.class);
                responseBuilder.setUserId(String.valueOf(userId))
                        .setUsername(username)
                        .setSuccess(true)
                        .setMessage("User info retrieved successfully");
            } else {
                responseBuilder.setSuccess(false)
                        .setMessage("Invalid or expired token");
            }
        } catch (Exception e) {
            log.error("Error extracting user info from token: {}", e.getMessage(), e);
            responseBuilder.setSuccess(false)
                    .setMessage("Error processing token: " + e.getMessage());
        }
        UserInfoResponse response = responseBuilder.build();
        responseObserver.onNext(response);
        responseObserver.onCompleted();
        log.debug("gRPC getUserInfo response success: {}", response.getSuccess());
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/mapper/CredentialsMapper.java
================
package com.glizzy.milliondollarpicks.authservice.mapper;
import com.glizzy.milliondollarpicks.authservice.dto.CredentialsDto;
import com.glizzy.milliondollarpicks.authservice.entity.Credentials;
import org.springframework.stereotype.Component;
@Component
public class CredentialsMapper {
    public CredentialsDto toDto(Credentials credentials) {
        if (credentials == null) {
            return null;
        }
        return CredentialsDto.builder()
                .id(credentials.getId())
                .username(credentials.getUsername())
                .userId(credentials.getUserId())
                .accountLocked(credentials.getAccountLocked())
                .build();
    }
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/repository/CredentialsRepository.java
================
package com.glizzy.milliondollarpicks.authservice.repository;
import com.glizzy.milliondollarpicks.authservice.entity.Credentials;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import java.util.Optional;
@Repository
public interface CredentialsRepository extends JpaRepository<Credentials, Long> {
    Optional<Credentials> findByUsername(String username);
    boolean existsByUsername(String username);
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/service/AuthService.java
================
package com.glizzy.milliondollarpicks.authservice.service;
import com.glizzy.milliondollarpicks.authservice.dto.AuthResponseDto;
import com.glizzy.milliondollarpicks.authservice.dto.CredentialsDto;
import com.glizzy.milliondollarpicks.authservice.dto.LoginRequestDto;
public interface AuthService {
    AuthResponseDto login(LoginRequestDto loginRequest);
    AuthResponseDto logout(String token);
    CredentialsDto createCredentials(String username, String password, Long userId);
    void resetPassword(String username, String newPassword);
    boolean validateToken(String token);
}

================
File: src/main/java/com/glizzy/milliondollarpicks/authservice/service/AuthServiceImpl.java
================
package com.glizzy.milliondollarpicks.authservice.service;
import com.glizzy.milliondollarpicks.authservice.dto.AuthResponseDto;
import com.glizzy.milliondollarpicks.authservice.dto.CredentialsDto;
import com.glizzy.milliondollarpicks.authservice.dto.LoginRequestDto;
import com.glizzy.milliondollarpicks.authservice.entity.Credentials;
import com.glizzy.milliondollarpicks.authservice.exception.AuthenticationException;
import com.glizzy.milliondollarpicks.authservice.mapper.CredentialsMapper;
import com.glizzy.milliondollarpicks.authservice.repository.CredentialsRepository;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.security.Key;
import java.time.OffsetDateTime;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
@Service
@RequiredArgsConstructor
@Transactional
public class AuthServiceImpl implements AuthService {
    private final CredentialsRepository credentialsRepository;
    private final CredentialsMapper credentialsMapper;
    private final PasswordEncoder passwordEncoder;
    @Value("${jwt.secret}")
    private String jwtSecret;
    @Value("${jwt.expiration}")
    private long jwtExpiration;
    private Key getSigningKey() {
        return Keys.hmacShaKeyFor(jwtSecret.getBytes());
    }
    @Override
    public AuthResponseDto login(LoginRequestDto loginRequest) {
        Credentials credentials = credentialsRepository.findByUsername(loginRequest.getUsername())
                .orElseThrow(() -> new AuthenticationException("Invalid username or password"));
        if (credentials.getAccountLocked()) {
            return AuthResponseDto.builder()
                    .success(false)
                    .message("Account is locked")
                    .build();
        }
        if (!passwordEncoder.matches(loginRequest.getPassword(), credentials.getPasswordHash())) {
            credentials.setFailedLoginAttempts(credentials.getFailedLoginAttempts() + 1);
            if (credentials.getFailedLoginAttempts() >= 5) {
                credentials.setAccountLocked(true);
            }
            credentialsRepository.save(credentials);
            throw new AuthenticationException("Invalid username or password");
        }
        credentials.setFailedLoginAttempts(0);
        credentialsRepository.save(credentials);
        Map<String, Object> claims = new HashMap<>();
        claims.put("userId", credentials.getUserId());
        claims.put("username", credentials.getUsername());
        String token = Jwts.builder()
                .setClaims(claims)
                .setSubject(credentials.getUsername())
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + jwtExpiration))
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)
                .compact();
        return AuthResponseDto.builder()
                .token(token)
                .userId(credentials.getUserId())
                .username(credentials.getUsername())
                .success(true)
                .build();
    }
    @Override
    public AuthResponseDto logout(String token) {
        return AuthResponseDto.builder()
                .success(true)
                .message("Logged out successfully")
                .build();
    }
    @Override
    public CredentialsDto createCredentials(String username, String password, Long userId) {
        if (credentialsRepository.existsByUsername(username)) {
            throw new AuthenticationException("Username already exists");
        }
        Credentials credentials = new Credentials();
        credentials.setUsername(username);
        credentials.setPasswordHash(passwordEncoder.encode(password));
        credentials.setLastPasswordChange(OffsetDateTime.now());
        credentials.setAccountLocked(false);
        credentials.setFailedLoginAttempts(0);
        credentials.setUserId(userId);
        Credentials savedCredentials = credentialsRepository.save(credentials);
        return credentialsMapper.toDto(savedCredentials);
    }
    @Override
    public void resetPassword(String username, String newPassword) {
        Credentials credentials = credentialsRepository.findByUsername(username)
                .orElseThrow(() -> new AuthenticationException("User not found"));
        credentials.setPasswordHash(passwordEncoder.encode(newPassword));
        credentials.setLastPasswordChange(OffsetDateTime.now());
        credentials.setFailedLoginAttempts(0);
        credentials.setAccountLocked(false);
        credentialsRepository.save(credentials);
    }
    @Override
    public boolean validateToken(String token) {
        try {
            Jwts.parserBuilder()
                    .setSigningKey(getSigningKey())
                    .build()
                    .parseClaimsJws(token);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}

================
File: src/main/proto/auth.proto
================
syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.glizzy.milliondollarpicks.authservice.grpc";
option java_outer_classname = "AuthProto";

package auth;

// Authentication service definition
service AuthService {
  // Validate a JWT token
  rpc ValidateToken (TokenValidationRequest) returns (TokenValidationResponse) {}

  // Get user info from token
  rpc GetUserInfo (TokenValidationRequest) returns (UserInfoResponse) {}
}

// The request message containing the token to validate
message TokenValidationRequest {
  string token = 1;
}

// The response message containing the validation result
message TokenValidationResponse {
  bool valid = 1;
  string message = 2;
}

// The response message containing user information
message UserInfoResponse {
  string user_id = 1;
  string username = 2;
  bool success = 3;
  string message = 4;
}

================
File: src/main/resources/application-docker.yml
================
spring:
  datasource:
    url: jdbc:postgresql://postgres:5432/authdb
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true
  flyway:
    url: ${SPRING_FLYWAY_URL:jdbc:postgresql://postgres:5432/authdb}
    user: ${SPRING_FLYWAY_USER:postgres}
    password: ${SPRING_FLYWAY_PASSWORD:postgres}
    baseline-on-migrate: true
    locations: classpath:db/migration
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    com.glizzy.milliondollarpicks: DEBUG
    org.springframework.boot: INFO
grpc:
  server:
    port: 9090

================
File: src/main/resources/application.yml
================
spring:
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:authdb}
    username: ${DB_USERNAME:postgres}
    password: ${DB_PASSWORD:postgres}
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  flyway:
    baseline-on-migrate: true
    locations: classpath:db/migration
dgs:
  graphql:
    enabled: true
    context:
      builder-enabled: true
  graphiql:
    enabled: true
    path: /graphiql
jwt:
  secret: ${JWT_SECRET:a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6a7b8c9d0}
  expiration: ${JWT_EXPIRATION:86400000}
logging:
  level:
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    com.glizzy.milliondollarpicks: DEBUG
grpc:
  server:
    port: 9090

================
File: src/main/resources/db/migration/V1__init_auth_schema.sql
================
CREATE TABLE IF NOT EXISTS credentials (
                                           id BIGSERIAL PRIMARY KEY,
                                           username VARCHAR(50) NOT NULL UNIQUE,
                                           password_hash VARCHAR(255) NOT NULL,
                                           last_password_change TIMESTAMP WITH TIME ZONE,
                                           account_locked BOOLEAN DEFAULT FALSE,
                                           failed_login_attempts INTEGER DEFAULT 0,
                                           user_id BIGINT NOT NULL
);
CREATE INDEX idx_credentials_username ON credentials(username);
CREATE INDEX idx_credentials_user_id ON credentials(user_id);

================
File: src/main/resources/schema/schema.graphqls
================
scalar DateTime

type Query {
    validateToken(token: String): Boolean
    me(token: String): UserInfo
}

type Mutation {
    login(username: String!, password: String!): AuthResponse
    logout(token: String!): AuthResponse
    resetPassword(username: String!, newPassword: String!): Boolean
    createCredentials(username: String!, password: String!, userId: ID!): Credentials
}

type AuthResponse {
    token: String
    userId: ID
    username: String
    success: Boolean!
    message: String
}

type Credentials {
    id: ID!
    username: String!
    userId: ID!
    accountLocked: Boolean
}

# Instead of UserReference with @key directive, use a local type
type UserInfo {
    id: ID!
    username: String!
}

# Keep this commented for later federation use
# type UserReference @key(fields: "id") {
#     id: ID!
#     username: String!
# }

================
File: src/test/java/com/glizzy/milliondollarpicks/authservice/AuthServiceApplicationTests.java
================
package com.glizzy.milliondollarpicks.authservice;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
@SpringBootTest
class AuthServiceApplicationTests {
    @Test
    void contextLoads() {
    }
}


================================================================
Instruction
================================================================
# Repository Instructions

This repository contains the source code for the Repomix tool. Please follow these guidelines when analyzing the code:

1. Focus on the core functionality in the `src/core` directory.
2. Pay special attention to the security checks in `src/core/security`.
3. Ignore any files in the `tests` directory.
